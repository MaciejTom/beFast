{"ast":null,"code":"var _jsxFileName = \"/home/maciej/Pulpit/reflex/reflex/src/App.js\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [div, setDiv] = useState(\"white\");\n  const [first, setFirst] = useState(1);\n  const [second, setSecond] = useState(1);\n  const [timeStart, setTimeStart] = useState(0);\n  const [timeFinish, setTimeFinish] = useState(12);\n  const [arr, setArr] = useState();\n  const [amount, setAmount] = useState(100);\n\n  const setGreenColor = arr => {\n    setDiv(\"green\"); // console.log(el)\n  };\n\n  const setColor = () => {\n    const colors = ['red', 'bronze', 'blue', 'orange', 'yellow'];\n    setDiv(colors[Math.floor(Math.random() * (colors.length - 0 + 1)) + 0]); // console.log(el + first*1000)\n  };\n\n  const setWhite = () => {\n    setDiv(\"white\"); // console.log(el + first*1000 + second*1000)\n  };\n\n  const handleChangeFirst = e => {\n    setFirst(e.target.value); // console.log(array)\n    // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n    // console.log(\"first\")\n    // console.log(info.first)\n  };\n\n  const handleChangeSecond = e => {\n    setSecond(e.target.value); // console.log(array)\n    // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n\n    console.log(\"second\");\n  };\n\n  const handleChangeStart = e => {\n    setTimeStart(e.target.value); // console.log(array)\n    // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n\n    console.log(\"third\");\n  };\n\n  const handleChangeFinish = e => {\n    setTimeFinish(e.target.value); // console.log(array)\n    // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n\n    console.log(\"fourth\");\n  };\n\n  const handleChangeAmount = e => {\n    setAmount(e.target.value);\n  };\n\n  function loop() {\n    const x = parseInt(amount);\n    let array = [];\n    let y = 0;\n    let random = (Math.floor(Math.random() * (parseInt(timeFinish) - parseInt(timeStart) + 1)) + parseInt(timeStart)) * 1000; // parseFloat(random)\n\n    y = random + y;\n    array.push(y);\n\n    for (let i = 0; i < x; i++) {\n      // Math.floor(Math.random() * (max - min + 1)) + min;\n      // random = (Math.floor(Math.random() * (timeFinish - timeStart + 1)) + timeStart + first + second)*1000;\n      random = (Math.floor(Math.random() * (parseInt(timeFinish) - parseInt(timeStart) + 1)) + parseInt(timeStart) + parseInt(first) + parseInt(second)) * 1000;\n      console.log(y); // parseFloat(random)\n\n      y = random + y;\n      array.push(y); // random = ((Math.floor(Math.random() * (info.timeFinish - info.timeStart)) + info.timeStart  + info.first + info.second))*1000;\n    }\n\n    console.log(array);\n    y = 0;\n    console.log(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n    random = 0;\n    setArr(array);\n    array = [];\n  }\n\n  function start() {\n    console.log(arr);\n    console.log(\"start\");\n    arr.map(el => {\n      setTimeout(setGreenColor, el + timeStart * 1000);\n      setTimeout(setColor, el + first * 1000 + timeStart * 1000);\n      setTimeout(setWhite, el + first * 1000 + second * 1000 + timeStart * 1000);\n      return console.log(\"costam\");\n    });\n  } //\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, \"Czas trwania pierwszego sygna\\u0142u\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"first\",\n    value: first,\n    onChange: handleChangeFirst,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, \"Czas trwania drugiego sygna\\u0142u\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"second\",\n    value: second,\n    onChange: handleChangeSecond,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, \"Minimalny czas oczekiwania na sygna\\u0142\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"timeStart\",\n    value: timeStart,\n    onChange: handleChangeStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, \"Maksymalny czas oczekiwania na sygna\\u0142\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"timeFinish\",\n    value: timeFinish,\n    onChange: handleChangeFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, \"Ilo\\u015B\\u0107 sekwencji\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"amount\",\n    value: amount,\n    onChange: handleChangeAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: loop,\n    className: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, \"Kliknij aby zatwierdzi\\u0107 czas\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: start,\n    className: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, \"Start\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\",\n    style: {\n      backgroundColor: div\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 3\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/maciej/Pulpit/reflex/reflex/src/App.js"],"names":["React","useState","App","div","setDiv","first","setFirst","second","setSecond","timeStart","setTimeStart","timeFinish","setTimeFinish","arr","setArr","amount","setAmount","setGreenColor","setColor","colors","Math","floor","random","length","setWhite","handleChangeFirst","e","target","value","handleChangeSecond","console","log","handleChangeStart","handleChangeFinish","handleChangeAmount","loop","x","parseInt","array","y","push","i","start","map","el","setTimeout","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\n\n\nfunction App() {\n\n\n\n  const [div, setDiv] = useState(\"white\")\n  const [first, setFirst] = useState(1)\n  const [second, setSecond] = useState(1)\n  const [timeStart, setTimeStart] = useState(0);\n  const [timeFinish, setTimeFinish] = useState(12);\n  const [arr, setArr] = useState();\n\n  const [amount, setAmount] = useState(100);\n\n\n\nconst setGreenColor = (arr) => {\n  setDiv(\"green\")\n  // console.log(el)\n\n\n}\nconst setColor = () => {\n  const colors = ['red', 'bronze', 'blue', 'orange', 'yellow'];\n  setDiv(colors[Math.floor(Math.random() * (colors.length - 0 + 1))+0])\n  // console.log(el + first*1000)\n}\nconst setWhite = () => {\n  setDiv(\"white\")\n  // console.log(el + first*1000 + second*1000)\n}\n\n\n\n\n  const handleChangeFirst = (e) => {\n\n    setFirst(e.target.value)\n\n    // console.log(array)\n     // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n     // console.log(\"first\")\n     // console.log(info.first)\n   }\n\n   const handleChangeSecond = (e) => {\n     setSecond(e.target.value)\n      // console.log(array)\n      // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n      console.log(\"second\")\n    }\n    const handleChangeStart = (e) => {\n      setTimeStart(e.target.value)\n      // console.log(array)\n\n       // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n       console.log(\"third\")\n\n     }\n     const handleChangeFinish = (e) => {\n       setTimeFinish(e.target.value)\n       // console.log(array)\n        // setInfo((prev => ({ ...prev, [target.name]: target.value })));\n        console.log(\"fourth\")\n      }\n\n\n       const handleChangeAmount = (e) => {\n         setAmount(e.target.value)\n       }\n      function loop() {\n        const x = parseInt(amount);\n        let array = [];\n        let y = 0;\n        let random = (Math.floor(Math.random() * (parseInt(timeFinish) - parseInt(timeStart) + 1)) + parseInt(timeStart))*1000;\n\n        // parseFloat(random)\n\n        y = random + y;\n        array.push(y);\n        for (let i = 0; i < x; i++) {\n          // Math.floor(Math.random() * (max - min + 1)) + min;\n          // random = (Math.floor(Math.random() * (timeFinish - timeStart + 1)) + timeStart + first + second)*1000;\n          random = (Math.floor(Math.random() * (parseInt(timeFinish) - parseInt(timeStart) + 1)) + parseInt(timeStart) + parseInt(first) + parseInt(second))*1000;\n\n          console.log(y)\n\n          // parseFloat(random)\n\n          y = random + y;\n\n          array.push(y);\n\n          // random = ((Math.floor(Math.random() * (info.timeFinish - info.timeStart)) + info.timeStart  + info.first + info.second))*1000;\n        }\n        console.log(array)\n        y = 0;\n      console.log(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")\n      random = 0\n        setArr(array)\n        array = [];\n\n\n      }\n\n\nfunction start() {\n\n  console.log(arr)\n  console.log(\"start\")\n  arr.map(el => {\n     setTimeout(setGreenColor, el + timeStart*1000);\n     setTimeout(setColor, el + first*1000 + timeStart*1000);\n     setTimeout(setWhite, el + first*1000 + second*1000 + timeStart*1000);\n     return console.log(\"costam\")\n   });\n }\n\n\n\n//\n\n\n\n\n\n\n  return (\n  <div className=\"App\">\n  <div className=\"inputs\">\n    <label>\n      Czas trwania pierwszego sygnału\n      <input\n        type=\"number\"\n        name=\"first\"\n        value={first}\n        onChange={handleChangeFirst}\n      />\n    </label>\n    <label>\n      Czas trwania drugiego sygnału\n      <input\n        type=\"number\"\n        name=\"second\"\n        value={second}\n        onChange={handleChangeSecond}\n      />\n    </label>\n    <label>\n      Minimalny czas oczekiwania na sygnał\n      <input\n        type=\"number\"\n        name=\"timeStart\"\n        value={timeStart}\n        onChange={handleChangeStart}\n      />\n    </label>\n\n    <label>\n      Maksymalny czas oczekiwania na sygnał\n      <input\n        type=\"number\"\n        name=\"timeFinish\"\n        value={timeFinish}\n        onChange={handleChangeFinish}\n      />\n    </label>\n    <label>\n      Ilość sekwencji\n      <input\n        type=\"number\"\n        name=\"amount\"\n        value={amount}\n        onChange={handleChangeAmount}\n      />\n    </label>\n    <button onClick={loop} className=\"start\">\n      Kliknij aby zatwierdzić czas\n    </button>\n    <button onClick={start} className=\"start\">\n      Start\n    </button>\n  </div>\n\n  <div className=\"box\" style={{ backgroundColor: div }}></div>\n</div>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}